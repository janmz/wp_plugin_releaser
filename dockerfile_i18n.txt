# Multi-stage Dockerfile für wp_plugin_release mit i18n Support

# Build Stage
FROM golang:1.21-alpine AS builder

# Build-Argumente
ARG VERSION=dev
ARG BUILD_TIME="unknown"
ARG GIT_COMMIT="unknown"

# Arbeitsverzeichnis setzen
WORKDIR /app

# System-Dependencies installieren
RUN apk add --no-cache \
    git \
    ca-certificates \
    tzdata

# Go Module-Dateien kopieren
COPY go.mod go.sum ./

# Dependencies herunterladen
RUN go mod download

# Quellcode kopieren
COPY . .

# Übersetzungen validieren
RUN if [ ! -f "locales/en.json" ] || [ ! -f "locales/de.json" ]; then \
        echo "Error: Translation files missing"; \
        exit 1; \
    fi

# Binärdatei kompilieren
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags "-s -w -X main.Version=${VERSION} -X 'main.BuildTime=${BUILD_TIME}' -X main.GitCommit=${GIT_COMMIT}" \
    -o wp_plugin_release \
    .

# Runtime Stage
FROM alpine:latest

# Metadata
LABEL maintainer="Jan Neuhaus <contact@vaya-consulting.de>"
LABEL description="WordPress Plugin Release Tool with i18n support"
LABEL version="${VERSION}"

# Laufzeit-Dependencies installieren
RUN apk --no-cache add \
    ca-certificates \
    openssh-client \
    curl \
    tzdata \
    && rm -rf /var/cache/apk/*

# Arbeitsverzeichnis erstellen
WORKDIR /workspace

# Binärdatei und Übersetzungen kopieren
COPY --from=builder /app/wp_plugin_release /usr/local/bin/wp_plugin_release
COPY --from=builder /app/locales /usr/local/share/wp_plugin_release/locales

# Übersetzungen global verfügbar machen
ENV WP_PLUGIN_RELEASE_LOCALES_PATH=/usr/local/share/wp_plugin_release/locales

# Non-root User erstellen
RUN adduser -D -s /bin/sh wp_release_user
USER wp_release_user

# Standard-Sprache setzen (kann überschrieben werden)
ENV LANG=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8

# Healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD wp_plugin_release --version || exit 1

# Volume für Workspace
VOLUME ["/workspace"]

# Entry Point
ENTRYPOINT ["wp_plugin_release"]
CMD ["--help"]

# Multi-arch Build Instructions
# Dieses Dockerfile unterstützt Multi-Architecture Builds:
#
# Bauen für aktuelle Architektur:
# docker build -t wp_plugin_release:latest .
#
# Multi-arch Build (benötigt buildx):
# docker buildx create --name multiarch --use
# docker buildx build --platform linux/amd64,linux/arm64 -t wp_plugin_release:latest --push .
#
# Mit Build-Argumenten:
# docker build \
#   --build-arg VERSION=1.0.0 \
#   --build-arg BUILD_TIME="$(date '+%Y-%m-%d %H:%M:%S')" \
#   --build-arg GIT_COMMIT="$(git rev-parse HEAD)" \
#   -t wp_plugin_release:1.0.0 .

# Verwendungsbeispiele:
# 
# 1. Hilfe anzeigen:
# docker run --rm wp_plugin_release:latest
#
# 2. Plugin-Release erstellen (aktuelles Verzeichnis mounten):
# docker run --rm -v $(pwd):/workspace wp_plugin_release:latest /workspace
#
# 3. Mit deutscher Lokalisierung:
# docker run --rm -e LANG=de_DE.UTF-8 -v $(pwd):/workspace wp_plugin_release:latest /workspace
#
# 4. Mit SSH-Keys (für Upload):
# docker run --rm \
#   -v $(pwd):/workspace \
#   -v ~/.ssh:/home/wp_release_user/.ssh:ro \
#   wp_plugin_release:latest /workspace
#
# 5. Interaktiv (für Debugging):
# docker run --rm -it --entrypoint /bin/sh \
#   -v $(pwd):/workspace \
#   wp_plugin_release:latest